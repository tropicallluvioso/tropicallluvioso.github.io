---
import MainLayout from "../layouts/MainLayout.astro"
import '../styles/main.css';
import exscripts from "../components/external-scripts.astro"

let title = "Tropical Lluvioso"
---

<MainLayout>
<section class="first">
  <div class="outer">
    <div class="inner">
      <div class="bg one">
        <h2 class="section-heading"></h2>
      </div>
    </div>
  </div>

</section>
<section class="second">
  <div class="outer">
    <div class="inner">
      <div class="bg two">
        <h2 class="section-heading"></h2>
      </div>
    </div>
  </div>

</section>




</MainLayout>

<script is:inline src="https://assets.codepen.io/16327/gsap-latest-beta.min.js"></script>
<script is:inline src="https://assets.codepen.io/16327/Observer.min.js"></script>
<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script>

<script is:inline>
gsap.registerPlugin(Observer);

let sections = document.querySelectorAll("section"),
  images = document.querySelectorAll(".bg"),
  headings = gsap.utils.toArray(".section-heading"),
  outerWrappers = gsap.utils.toArray(".outer"),
  innerWrappers = gsap.utils.toArray(".inner"),
  currentIndex = -1,
  wrap = gsap.utils.wrap(0, sections.length),
  animating;

gsap.set(outerWrappers, { xPercent: 100 });
gsap.set(innerWrappers, { xPercent: -100 });

function gotoSection(index, direction) {
  index = wrap(index); // make sure it's valid
  animating = true;
  let fromTop = direction === -1,
    dFactor = fromTop ? -1 : 1,
    tl = gsap.timeline({
      defaults: { duration: 1.25, ease: "power1.inOut" },
      onComplete: () => (animating = false)
    });
  if (currentIndex >= 0) {
    // The first time this function runs, current is -1
    gsap.set(sections[currentIndex], { zIndex: 0 });
    tl.to(images[currentIndex], { xPercent: -15 * dFactor }).set(
      sections[currentIndex],
      { autoAlpha: 0 }
    );
  }
  gsap.set(sections[index], { autoAlpha: 1, zIndex: 1 });
  tl.fromTo(
    [outerWrappers[index], innerWrappers[index]],
    { xPercent: (i) => (i ? -100 * dFactor : 100 * dFactor) },
    { xPercent: 0 },
    0
  ).fromTo(images[index], { xPercent: 15 * dFactor }, { xPercent: 0 }, 0);
  currentIndex = index;
}

gotoSection(0, 1);

Observer.create({
  type: "wheel,touch,pointer",
  wheelSpeed: 15,
  onDown: () => {
    !animating && gotoSection(currentIndex + 1, 1);
  },
  onUp: () => {
    !animating && gotoSection(currentIndex + 1, -1);
  },
  tolerance: 100,
  preventDefault: true
});


</script>